package geneticShakespeare;

import java.util.ArrayList;
import java.util.concurrent.ThreadLocalRandom;

public class CreateUnit {
	public static String newPopulation(int par1Fit, int par2Fit, String parent1, String parent2){
		int par1PCent = (par1Fit/(par1Fit+par2Fit));
		int testCaseLength = Main.getTestCase().length();
		int split = ThreadLocalRandom.current().nextInt(testCaseLength) + (par1PCent*(testCaseLength));
		String temp = "";
		if (split > testCaseLength){
			temp = parent1;
		}
		else{
			temp = parent2;
		}
		for(int i = 0; i < parent1.length(); i++){
			temp.toCharArray()[i] = parent1.toCharArray()[i];
		}
		return temp;
	}
	public static void genMatingPool(String[] population){
		int populationCount = population.length;
		ArrayList<String> matingPool = new ArrayList();
		for(int i = 0; i < populationCount; i++){
			int temp = (Population.calcFitness(population[i])/(Main.getTestCase().length())*100);
			for(int j =0; j < (temp); j++){
				matingPool.add(population[i]);
			}
		}
		 matingPool.forEach((a)->System.out.println(a));
		
	}
}
